// alu_{{ width }}bit_{{ ops | join('_') }}.sv
module alu_{{ width }}bit_{{ ops | join('_') }} (
    input  logic [{{ width-1 }}:0] A,
    input  logic [{{ width-1 }}:0] B,
    input  logic [{{ op_width - 1 }}:0] opcode,
    output logic [{{ width-1 }}:0] result
);

    // Define local parameters for opcodes based on enabled operations 
    // avoid single line if statements here. Use for loops. 
    // using for loop to define local parameters for all operations
    {% for op in ops %}
    localparam [{{ op_width - 1 }}:0] OPCODE_{{ op.upper() }} = {{ op_width }}'b{{ '%0{}b'.format(op_width)|format(op_code[op]) }};
    {% endfor %}

    logic [{{ width-1 }}:0] _a = A;
    logic [{{ width-1 }}:0] _b = B;
    logic [{{ width-1 }}:0] result_internal;

    {% if 'add' in ops or 'sub' in ops %}
    logic [{{ width-1 }}:0] add_sub_result;
    logic carry_in = 1'b0;
    {% if 'sub' in ops %}
    logic is_sub = (opcode == OPCODE_SUB);
    wire [{{ width-1 }}:0] _b_mod = is_sub ? ~_b : _b;
    carry_in = is_sub ? 1'b1 : 1'b0;
    add_sub_result = _a + _b_mod + carry_in;
    {% else %}
<<<<<<< Updated upstream:templates/Operation Groups/add_group_template.sv.j2
    add_sub_result = _a + _b;
=======
    add_sub_result = _a + _b; // use significant bits instead of <><=>=
>>>>>>> Stashed changes:templates/add_group_template.sv.j2
    {% endif %}

    {% if 'lt' in ops %}
    logic lt_result = ($signed(_a) < $signed(_b));
    {% endif %}
    {% if 'gt' in ops %}
    logic gt_result = ($signed(_a) > $signed(_b));
    {% endif %}
    {% if 'le' in ops %}
    logic le_result = ($signed(_a) <= $signed(_b));
    {% endif %}
    {% if 'ge' in ops %}
    logic ge_result = ($signed(_a) >= $signed(_b));
    {% endif %}

    always_comb begin
        case (opcode)
            {% if 'add' in ops %}
            OPCODE_ADD: result_internal = add_sub_result;
            {% endif %}
            {% if 'sub' in ops %}
            OPCODE_SUB: result_internal = add_sub_result;
            {% endif %}
            {% if 'lt' in ops %}
            OPCODE_LT: result_internal = {{ width }}'(lt_result);
            {% endif %}
            {% if 'gt' in ops %}
            OPCODE_GT: result_internal = {{ width }}'(gt_result);
            {% endif %}
            {% if 'le' in ops %}
            OPCODE_LE: result_internal = {{ width }}'(le_result);
            {% endif %}
            {% if 'ge' in ops %}
            OPCODE_GE: result_internal = {{ width }}'(ge_result);
            {% endif %}
            default: result_internal = '0;
        endcase
    end

    assign result = result_internal;

endmodule